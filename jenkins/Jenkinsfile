pipeline {
    agent any
    
    environment {
        APP_NAME = 'juice-shop'
        JUICE_IMAGE = 'bkimminich/juice-shop:latest'
        REPORT_DIR = 'reports'
        WORKSPACE_DIR = "${WORKSPACE}"
        TRIVY_SEVERITY = 'CRITICAL,HIGH,MEDIUM'
        ZAP_TIMEOUT = '10'
        SCAN_NETWORK = 'security-scan-net'
        MAX_CRITICAL_VULNS = '0'
        MAX_HIGH_VULNS = '5'
        MAX_MEDIUM_VULNS = '20'
    }
    
    options {
        timestamps()
        timeout(time: 45, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
    }
    
    stages {
        stage('Preparation') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "ðŸš€ Starting Security Assessment"
                        sh '''
                            mkdir -p ${REPORT_DIR}/{trivy,zap,nmap,dependency-check,sbom,aggregated}
                            chmod 755 ${REPORT_DIR}
                            docker rm -f ${APP_NAME} || true
                            docker network rm ${SCAN_NETWORK} || true
                            docker system prune -f --volumes || true
                        '''
                    }
                }
            }
        }

        stage('Checkout Source') {
            steps {
                ansiColor('xterm') {
                    checkout scm
                    script {
                        env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        env.GIT_AUTHOR = sh(script: 'git show -s --format="%an" HEAD', returnStdout: true).trim()
                    }
                }
            }
        }

        // Wrap all subsequent stages that run shell commands with ansiColor
        stage('Docker Setup') {
            steps {
                ansiColor('xterm') {
                    script {
                        sh 'docker --version'
                        sh 'docker info'
                        sh "docker network create ${SCAN_NETWORK} --driver bridge --subnet=172.20.0.0/16 || true"
                        
                        def images = [JUICE_IMAGE, 'aquasec/trivy:latest', 'anchore/syft:latest', 
                                      'owasp/zap2docker-stable:latest', 'instrumenta/nmap:latest', 'owasp/dependency-check:latest']
                        images.each { img -> retry(3) { sh "docker pull ${img}" } }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                ansiColor('xterm') {
                    script {
                        sh """
                            docker run -d --name ${APP_NAME} --network ${SCAN_NETWORK} --ip 172.20.0.10 -p 3000:3000 ${JUICE_IMAGE}
                            for i in {1..60}; do
                                if docker exec ${APP_NAME} wget --quiet --tries=1 --spider http://localhost:3000/ 2>/dev/null; then
                                    echo "âœ… Application ready"; break
                                fi
                                sleep 5
                            done
                        """
                    }
                }
            }
        }

        // Repeat the same pattern for all other stages where shell commands are used:
        // Static Analysis, Container Scan, Network Scan, DAST, Security Gate

    }
    
    post {
        always {
            ansiColor('xterm') {
                archiveArtifacts artifacts: "${REPORT_DIR}/**/*", fingerprint: true, allowEmptyArchive: true
                sh "docker rm -f ${APP_NAME} || true; docker network rm ${SCAN_NETWORK} || true"
            }
        }
    }
}
