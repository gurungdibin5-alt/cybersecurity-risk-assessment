pipeline {
    agent any
    
    environment {
        APP_NAME = 'juice-shop'
        JUICE_IMAGE = 'bkimminich/juice-shop:latest'
        REPORT_DIR = 'reports'
        WORKSPACE_DIR = "${WORKSPACE}"
        TRIVY_SEVERITY = 'CRITICAL,HIGH,MEDIUM'
        ZAP_TIMEOUT = '10'
        SCAN_NETWORK = 'security-scan-net'
        MAX_CRITICAL_VULNS = 0
        MAX_HIGH_VULNS = 5
        MAX_MEDIUM_VULNS = 20
    }
    
    options {
        timestamps()
        timeout(time: 45, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
    }
    
    stages {
        stage('Preparation') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "üöÄ Starting Security Assessment"
                        sh '''
                            mkdir -p ${REPORT_DIR}/{trivy,zap,nmap,dependency-check,sbom,aggregated}
                            chmod 755 ${REPORT_DIR}
                            docker rm -f ${APP_NAME} || true
                            docker network rm ${SCAN_NETWORK} || true
                            docker system prune -f --volumes || true
                        '''
                    }
                }
            }
        }

        stage('Checkout Source') {
            steps {
                ansiColor('xterm') {
                    checkout scm
                    script {
                        env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                        env.GIT_AUTHOR = sh(script: 'git show -s --format="%an" HEAD', returnStdout: true).trim()
                        echo "Checked out commit ${env.GIT_COMMIT_SHORT} by ${env.GIT_AUTHOR}"
                    }
                }
            }
        }

        stage('Docker Setup') {
            steps {
                ansiColor('xterm') {
                    script {
                        sh 'docker --version'
                        sh 'docker info'
                        sh "docker network create ${SCAN_NETWORK} --driver bridge --subnet=172.20.0.0/16 || true"

                        def images = [
                            JUICE_IMAGE,
                            'aquasec/trivy:latest',
                            'anchore/syft:latest',
                            'owasp/zap2docker-stable:latest',
                            'instrumenta/nmap:latest',
                            'owasp/dependency-check:latest'
                        ]
                        images.each { img -> retry(3) { sh "docker pull ${img}" } }
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                ansiColor('xterm') {
                    script {
                        sh """
                            docker run -d --name ${APP_NAME} --network ${SCAN_NETWORK} --ip 172.20.0.10 -p 3000:3000 ${JUICE_IMAGE}
                            for i in {1..60}; do
                                if docker exec ${APP_NAME} wget --quiet --tries=1 --spider http://localhost:3000/ 2>/dev/null; then
                                    echo "‚úÖ Application ready"; break
                                fi
                                sleep 5
                            done
                        """
                    }
                }
            }
        }

        stage('Static Analysis') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "üîç Running Dependency-Check (Static Analysis)"
                        sh """
                            docker run --rm -v ${WORKSPACE_DIR}:/src -v ${WORKSPACE_DIR}/${REPORT_DIR}/dependency-check:/report owasp/dependency-check:latest \
                                --scan /src --format ALL --out /report
                        """
                    }
                }
            }
        }

        stage('Container Scan & SBOM') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "üõ°Ô∏è Running Trivy for Vulnerabilities"
                        sh """
                            docker run --rm -v ${WORKSPACE_DIR}/${REPORT_DIR}/trivy:/report aquasec/trivy:latest image --severity ${TRIVY_SEVERITY} --format json --output /report/trivy.json ${JUICE_IMAGE}
                        """
                        echo "üì¶ Generating SBOM with Syft"
                        sh """
                            docker run --rm -v ${WORKSPACE_DIR}/${REPORT_DIR}/sbom:/sbom anchore/syft:latest ${JUICE_IMAGE} -o json > ${WORKSPACE_DIR}/${REPORT_DIR}/sbom/sbom.json
                        """
                    }
                }
            }
        }

        stage('Network Scan') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "üåê Running Nmap network scan"
                        sh """
                            docker run --rm --network ${SCAN_NETWORK} instrumenta/nmap:latest -p 3000 ${APP_NAME} -oX /tmp/nmap.xml
                            mv /tmp/nmap.xml ${WORKSPACE_DIR}/${REPORT_DIR}/nmap/nmap.xml
                        """
                    }
                }
            }
        }

        stage('DAST') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "üíª Running OWASP ZAP Dynamic Analysis"
                        sh """
                            docker run --rm -v ${WORKSPACE_DIR}/${REPORT_DIR}/zap:/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t http://${APP_NAME}:3000 -r zap_report.html -z "-config api.disablekey=true" -d -T ${ZAP_TIMEOUT}
                        """
                    }
                }
            }
        }

        stage('Security Gate') {
            steps {
                ansiColor('xterm') {
                    script {
                        echo "üö¶ Checking vulnerability thresholds (Trivy JSON)"
                        def trivyReport = readJSON file: "${REPORT_DIR}/trivy/trivy.json"
                        def critical = trivyReport.Results.collectMany{ it.Vulnerabilities ?: [] }.count { it.Severity == 'CRITICAL' }
                        def high = trivyReport.Results.collectMany{ it.Vulnerabilities ?: [] }.count { it.Severity == 'HIGH' }
                        def medium = trivyReport.Results.collectMany{ it.Vulnerabilities ?: [] }.count { it.Severity == 'MEDIUM' }

                        echo "Critical: ${critical}, High: ${high}, Medium: ${medium}"

                        if (critical > MAX_CRITICAL_VULNS || high > MAX_HIGH_VULNS || medium > MAX_MEDIUM_VULNS) {
                            error("‚ùå Vulnerability threshold exceeded! Failing the build.")
                        } else {
                            echo "‚úÖ Vulnerability thresholds are within limits."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            ansiColor('xterm') {
                archiveArtifacts artifacts: "${REPORT_DIR}/**/*", fingerprint: true, allowEmptyArchive: true
                sh "docker rm -f ${APP_NAME} || true; docker network rm ${SCAN_NETWORK} || true"
            }
        }

        failure {
            echo "‚ùå Pipeline failed!"
        }

        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
    }
}
