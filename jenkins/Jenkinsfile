pipeline {
    agent any
    
    environment {
        APP_NAME = 'juice-shop'
        JUICE_IMAGE = 'bkimminich/juice-shop:latest'
        REPORT_DIR = 'reports'
        WORKSPACE_DIR = "${WORKSPACE}"
        TRIVY_SEVERITY = 'CRITICAL,HIGH,MEDIUM'
        ZAP_TIMEOUT = '10'
        SCAN_NETWORK = 'security-scan-net'
        MAX_CRITICAL_VULNS = '0'
        MAX_HIGH_VULNS = '5'
        MAX_MEDIUM_VULNS = '20'
    }
    
    options {
        timestamps()
        ansiColor('xterm')
        timeout(time: 45, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))
    }
    
    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "🚀 Starting Security Assessment"
                    sh '''
                        mkdir -p ${REPORT_DIR}/{trivy,zap,nmap,dependency-check,sbom,aggregated}
                        chmod 755 ${REPORT_DIR}
                        docker rm -f ${APP_NAME} || true
                        docker network rm ${SCAN_NETWORK} || true
                        docker system prune -f --volumes || true
                    '''
                }
            }
        }
        
        stage('Checkout Source') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.GIT_AUTHOR = sh(script: 'git show -s --format="%an" HEAD', returnStdout: true).trim()
                }
            }
        }
        
        stage('Docker Setup') {
            steps {
                script {
                    sh 'docker --version'
                    sh 'docker info'
                    sh "docker network create ${SCAN_NETWORK} --driver bridge --subnet=172.20.0.0/16 || true"
                    
                    def images = [JUICE_IMAGE, 'aquasec/trivy:latest', 'anchore/syft:latest', 
                                  'owasp/zap2docker-stable:latest', 'instrumenta/nmap:latest', 'owasp/dependency-check:latest']
                    images.each { img -> retry(3) { sh "docker pull ${img}" } }
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                script {
                    sh """
                        docker run -d --name ${APP_NAME} --network ${SCAN_NETWORK} --ip 172.20.0.10 -p 3000:3000 ${JUICE_IMAGE}
                        for i in {1..60}; do
                            if docker exec ${APP_NAME} wget --quiet --tries=1 --spider http://localhost:3000/ 2>/dev/null; then
                                echo "✅ Application ready"; break
                            fi
                            sleep 5
                        done
                    """
                }
            }
        }
        
        stage('Static Analysis') {
            parallel {
                stage('Dependency Check') {
                    steps {
                        script {
                            sh """
                                docker run --rm \
                                -v "${WORKSPACE}":/src \
                                -v "${WORKSPACE}/${REPORT_DIR}/dependency-check":/report \
                                owasp/dependency-check:latest \
                                --scan /src --out /report --format JSON --format HTML --project "${APP_NAME}"
                            """
                        }
                    }
                    post {
                        always {
                            script {
                                if (fileExists("${REPORT_DIR}/dependency-check/dependency-check-report.html")) {
                                    publishHTML(reportDir: "${REPORT_DIR}/dependency-check", reportFiles: 'dependency-check-report.html', reportName: 'Dependency Check')
                                }
                            }
                        }
                    }
                }
                
                stage('SBOM') {
                    steps {
                        script {
                            sh """
                                docker run --rm \
                                -v "${WORKSPACE}/${REPORT_DIR}/sbom":/work \
                                anchore/syft:latest packages ${JUICE_IMAGE} \
                                -o json=/work/sbom.json -o spdx-json=/work/sbom-spdx.json
                            """
                        }
                    }
                }
            }
        }
        
        stage('Container Scan') {
            steps {
                script {
                    sh 'docker volume create trivy-cache || true'
                    def trivyExit = sh(returnStatus: true, script: """
                        docker run --rm -v "${WORKSPACE}/${REPORT_DIR}/trivy":/work -v trivy-cache:/root/.cache/ \
                        aquasec/trivy:latest image --scanners vuln,secret,config --severity ${TRIVY_SEVERITY} \
                        --format json --output /work/trivy-report.json --exit-code 1 ${JUICE_IMAGE}
                    """)
                    sh """
                        docker run --rm -v "${WORKSPACE}/${REPORT_DIR}/trivy":/work -v trivy-cache:/root/.cache/ \
                        aquasec/trivy:latest image --scanners vuln,secret,config \
                        --format template --template '@contrib/html.tpl' --output /work/trivy-report.html ${JUICE_IMAGE}
                    """
                    if (trivyExit == 1) { currentBuild.result = 'UNSTABLE'; echo "⚠️ Vulnerabilities found" }
                }
            }
            post {
                always {
                    publishHTML(reportDir: "${REPORT_DIR}/trivy", reportFiles: 'trivy-report.html', reportName: 'Trivy Report')
                }
            }
        }
        
        stage('Network Scan') {
            steps {
                script {
                    sh """
                        docker run --rm --network ${SCAN_NETWORK} -v "${WORKSPACE}/${REPORT_DIR}/nmap":/work \
                        instrumenta/nmap:latest nmap -sS -sV -sC -A -O -T4 --script vuln -oA /work/nmap-scan 172.20.0.10
                        docker run --rm -v "${WORKSPACE}/${REPORT_DIR}/nmap":/work instrumenta/nmap:latest \
                        bash -c 'xsltproc /usr/share/nmap/nmap.xsl /work/nmap-scan.xml > /work/nmap-report.html'
                    """
                }
            }
            post {
                always {
                    script {
                        if (fileExists("${REPORT_DIR}/nmap/nmap-report.html")) {
                            publishHTML(reportDir: "${REPORT_DIR}/nmap", reportFiles: 'nmap-report.html', reportName: 'Nmap Report')
                        }
                    }
                }
            }
        }
        
        stage('DAST') {
            parallel {
                stage('ZAP Baseline') {
                    steps {
                        script {
                            def zapExit = sh(returnStatus: true, script: """
                                docker run --rm --network ${SCAN_NETWORK} -v "${WORKSPACE}/${REPORT_DIR}/zap":/zap/wrk:rw \
                                owasp/zap2docker-stable:latest zap-baseline.py -t http://172.20.0.10:3000 -r zap-baseline-report.html -J zap-baseline-report.json -x zap-baseline-report.xml -m ${ZAP_TIMEOUT}
                            """)
                            if (zapExit != 0) { currentBuild.result = 'UNSTABLE' }
                        }
                    }
                }
                
                stage('ZAP Full Scan') {
                    steps {
                        timeout(time: 30, unit: 'MINUTES') {
                            script {
                                def zapFullExit = sh(returnStatus: true, script: """
                                    docker run --rm --network ${SCAN_NETWORK} -v "${WORKSPACE}/${REPORT_DIR}/zap":/zap/wrk:rw \
                                    owasp/zap2docker-stable:latest zap-full-scan.py -t http://172.20.0.10:3000 -r zap-full-report.html -J zap-full-report.json -x zap-full-report.xml -m ${ZAP_TIMEOUT}
                                """)
                                if (zapFullExit != 0) { currentBuild.result = 'UNSTABLE' }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Security Gate') {
            steps {
                script {
                    def trivyResults = readJSON file: "${REPORT_DIR}/trivy/trivy-report.json"
                    def counts = [CRITICAL:0, HIGH:0, MEDIUM:0]
                    trivyResults.Results?.each { r -> r.Vulnerabilities?.each { v -> counts[v.Severity] = counts[v.Severity]+1 } }
                    
                    echo "Critical: ${counts.CRITICAL}, High: ${counts.HIGH}, Medium: ${counts.MEDIUM}"
                    
                    def fail = false
                    if (counts.CRITICAL > MAX_CRITICAL_VULNS.toInteger()) fail = true
                    if (counts.HIGH > MAX_HIGH_VULNS.toInteger()) fail = true
                    if (counts.MEDIUM > MAX_MEDIUM_VULNS.toInteger()) fail = true
                    if (fail) { error("🚫 Security gate failed!") } else { echo "✅ Security gates passed" }
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: "${REPORT_DIR}/**/*", fingerprint: true, allowEmptyArchive: true
            sh "docker rm -f ${APP_NAME} || true; docker network rm ${SCAN_NETWORK} || true"
        }
    }
}
